{"version":3,"sources":["shared/utils/utils.js","projects/page/ProjectPage.jsx"],"names":["months","ProjectPage","props","useState","project","setProject","isLoading","setIsLoading","error","setError","projectId","useParams","useEffect","fetch","process","REACT_APP_BACKEND_URL","then","response","json","catch","err","message","className","src","alt","Fragment","Message","msgHeaderClassName","title","onOkButtonClick","value","msgType","ContentHeading","name","date","month","getMonth","year","getFullYear","dateFormatted","Date","timePeriod","description","String","Array","github","length","href","style","margin","width","height","video","frameBorder","allow","allowFullScreen"],"mappings":"+JAAMA,EAAS,GAEfA,EAAO,GAAK,UACZA,EAAO,GAAK,WACZA,EAAO,GAAK,QACZA,EAAO,GAAK,QACZA,EAAO,GAAK,MACZA,EAAO,GAAK,OACZA,EAAO,GAAK,OACZA,EAAO,GAAK,SACZA,EAAO,GAAK,YACZA,EAAO,GAAK,UACZA,EAAO,IAAM,WACbA,EAAO,IAAM,WC4CEC,UAjDK,SAAAC,GAAU,IAAD,EACKC,mBAAS,IADd,mBAClBC,EADkB,KACTC,EADS,OAESF,oBAAS,GAFlB,mBAElBG,EAFkB,KAEPC,EAFO,OAGCJ,qBAHD,mBAGlBK,EAHkB,KAGXC,EAHW,KAIjBC,EAAcC,cAAdD,UAERE,qBAAU,WACNL,GAAa,GAEbM,MAAMC,mHAAYC,sBAAwB,aAAeL,GACxDM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAGNZ,EAAWY,GACXV,GAAa,MAEZY,OAAM,SAACC,GACJb,GAAa,GACbE,EAASW,EAAIC,cAGlB,CAACX,IAQL,OAAQJ,EAAa,yBAAKgB,UAAU,WAAWC,IAAI,wCAAwCC,IAAI,eAC1F,kBAAC,IAAMC,SAAP,KAEKjB,GAAS,kBAACkB,EAAA,EAAD,CAASJ,UAAU,yBAAyBK,mBAAmB,QAAQC,MAAM,QAAQC,gBAT7E,SAACC,EAAOC,GAE9BtB,EAASqB,KAO+HtB,GACpI,kBAACwB,EAAA,EAAD,CAAgBV,UAAU,qBACrBlB,EAAQ6B,MAEb,yBAAKX,UAAU,aACf,4BD9BiB,SAACY,GAC1B,IAAIC,EAAQnC,EAAOkC,EAAKE,YACpBC,EAAOH,EAAKI,cAChB,MAAM,GAAN,OAAUH,EAAV,aAAoBE,GC2BPE,CAAc,IAAIC,KAAKpC,EAAQqC,cACpC,2BAAIrC,EAAQsC,aAC0C,IAApD,IAAIC,OAAO,IAAIC,MAAMxC,EAAQyC,QAAQ,IAAIC,OAAgB,uBAAGC,KAAM3C,EAAQyC,QAAjB,eAA2C,GAEtG,4BAAQjB,MAAOxB,EAAQ6B,KAAMe,MAAO,CAACC,OAAQ,QAASC,MAAM,OAAOC,OAAO,MAAM5B,IAAKnB,EAAQgD,MAAOC,YAAY,IAAIC,MAAM,0EAA0EC,iBAAe","file":"static/js/6.aa736080.chunk.js","sourcesContent":["const months = [];\r\n\r\nmonths[0] = \"January\";\r\nmonths[1] = \"February\";\r\nmonths[2] = \"March\";\r\nmonths[3] = \"April\";\r\nmonths[4] = \"May\";\r\nmonths[5] = \"June\";\r\nmonths[6] = \"July\";\r\nmonths[7] = \"August\";\r\nmonths[8] = \"September\";\r\nmonths[9] = \"October\";\r\nmonths[10] = \"November\";\r\nmonths[11] = \"December\";\r\n\r\n//returns date in \"January, 2020\" format\r\nexport const dateFormatted = (date) => {\r\n    let month = months[date.getMonth()];\r\n    let year = date.getFullYear();\r\n    return `${month}, ${year}`\r\n};","import React, {useState, useEffect} from \"react\";\r\n\r\n\r\nimport ContentHeading from \"../../shared/Heading/ContentHeading\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Message from \"../../shared/components/Message\";\r\nimport { dateFormatted } from \"../../shared/utils/utils.js\";\r\n\r\nconst ProjectPage = props => {\r\n    const [project, setProject] = useState({});\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState();\r\n    const { projectId } = useParams();\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n        \r\n        fetch(process.env.REACT_APP_BACKEND_URL + \"/projects/\" + projectId)\r\n        .then(response => response.json())\r\n        .then(response => {\r\n\r\n\r\n        setProject(response);\r\n        setIsLoading(false);\r\n        })\r\n        .catch((err) => {\r\n            setIsLoading(false);\r\n            setError(err.message);\r\n        });\r\n\r\n    }, [projectId]);\r\n\r\n    const OkBtnClickHandler = (value, msgType) => {\r\n        //closes message window\r\n        setError(value); \r\n    }\r\n\r\n\r\n   return (isLoading ? (<img className=\"centered\" src=\"/assets/images/cme-pl-ajax-loader.gif\" alt=\"Loading...\" />) : \r\n       (<React.Fragment>\r\n            {/* {isLoading && (<h1 className=\"centered\">Loading Project...</h1>)} */}\r\n            {error && <Message className=\"centered error message\" msgHeaderClassName=\"error\" title=\"Error\" onOkButtonClick={OkBtnClickHandler}>{error}</Message>}\r\n            <ContentHeading className=\"heading-container\">\r\n                {project.name}\r\n            </ContentHeading>\r\n            <div className=\"container\">\r\n            <h2>{dateFormatted(new Date(project.timePeriod))}</h2>\r\n            <p>{project.description}</p>\r\n            {(new String(new Array(project.github)[0]).length !== 0) ? <a href={project.github}>GitHub Link</a> : \"\"}\r\n            \r\n            <iframe title={project.name} style={{margin: \"auto\"}} width=\"100%\" height=\"515\" src={project.video} frameBorder=\"5\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\r\n            </div>\r\n        </React.Fragment>)\r\n    );\r\n};\r\n\r\n\r\nexport default ProjectPage;"],"sourceRoot":""}